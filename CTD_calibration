# -*- coding: utf-8 -*-
"""
Created on Wed Jul 10 14:46:33 2024

@author: cornelissenl


CTD calibration

Calibrate salintiy the mooring data with the CTD measurements taken with deployment and recovery.
This code opens the dataset with the mooring data, reads the Salinity at the depth of the instrument at t1 and tfinal 
and calibrates the timeseries.
The depth of each instrument is recorded in a csv file with all the instrument information.

"""


import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import xarray as xr
import os
from glob import glob

from datetime import datetime



CTD_path = ' '
data_path = ' '
export_path = ' '

instruments = pd.read_csv(data_path + 'instrumentlist.csv')
deployments = ['1412','1512','1702','1803','1901','2003','2211']


#%%

    
def calibrate(ds, file):
    # print(ds)
    f = np.where(instruments['filename'] == os.path.basename(file)[:-3])[0][0]
    yr = instruments['dep_year'][f]
    mooring = instruments['mooring'][f]
    z = instruments['depth'][f]
    #  find CTD files
    startfile = sorted(glob(CTD_path+str(yr)+'/*'+mooring+'*.cnv*'))
    end = deployments.index(str(yr)) + 1
    endfile = sorted(glob(CTD_path+str(yr)+'/*'+mooring+'*.cnv*'))
    
    # open CTD files
    data1 = pd.read_table(startfile[0], sep='\s+',skiprows=2,encoding_errors='ignore')
    header =  pd.read_table(startfile[0], sep='\s+',header = 0,encoding_errors='ignore').columns.tolist()
    data1.columns = header
    data2 = pd.read_table(endfile [0], sep='\s+',skiprows=2,encoding_errors='ignore')
    header =  pd.read_table(endfile [0], sep='\s+',header = 0,encoding_errors='ignore').columns.tolist()
    data2.columns = header

  #some CTD does not 
    try:
        d1 = np.where(data1['depth'] >=z)[0][0]
        d2 = np.where(data2['depth'] >=z)[0][0]
    except: #in case the CTD does not reach to the deepest depth of the mooring
        d1 = np.where(data1['depth'] >=np.max(data1['depth']))[0][0]
        # print(data1['depth'][d1])
        d2 = np.where(data2['depth'] >=np.max(data2['depth']))[0][0]
        # print(data2['depth'][d2])
    dT1 = data1['T'][d1]
    dT2 = data1['T'][d2]
    dS1 = data1['S'][d1]
    dS2 = data1['S'][d2]
    
    try:

        """
        don't remove nan values, if the begin of end measurement is nan,
        then there is too much time between the CTD cast and mooring measurement 
        to properly calibrate.
        In this case, only the start or end CTD measurement is used as calibration point.
        
        """
        dCTD1 = dS1 - dt.S[0]
        dCTD2 = dS2 - dt.S[-1]
        print(os.path.basename(file)[:-3])
        print(dCTD1.data)
        print(dCTD2.data)
        if abs(dCTD1.data)>0.05 and abs(dCTD2.data)>0.05:
            step = (dCTD2 - dCTD1)/len(dt.DateTime)
            poly1d_fn = np.poly1d([step,dCTD1])
        
            calibrate = np.round(poly1d_fn(np.arange(len(dt.DateTime))),5) #keep only 4 digits 
            S =  xr.DataArray(dt.S + calibrate, coords = {'DateTime': dt.DateTime})
            ds['S'] = S
            print(poly1d_fn)
        elif abs(dCTD1.data)>0.05 and np.isnan(dCTD2.data):
            step = 0
            poly1d_fn = np.poly1d([step,dCTD1])
        
            calibrate = np.round(poly1d_fn(np.arange(len(dt.DateTime))),5) #keep only 4 digits 
            S =  xr.DataArray(dt.S + calibrate, coords = {'DateTime': dt.DateTime})
            ds['S'] = S
            print('CTD1',poly1d_fn)
        elif np.isnan(dCTD1.data) and abs(dCTD2.data)>0.05:
            step = (dCTD2 - dCTD1)/len(dt.DateTime)
            poly1d_fn = np.poly1d([step,dCTD1])
        
            calibrate = np.round(poly1d_fn(np.arange(len(dt.DateTime))),5) #keep only 4 digits 
            S =  xr.DataArray(dt.S + calibrate, coords = {'DateTime': dt.DateTime})
            ds['S'] = S
            print('CTD2',poly1d_fn)
        
    except:
        pass
    return(ds)
#%%
files = sorted(glob(data_path+'*.nc'))
for f in files:
    ds = xr.open_dataset(f)
    file = f
    ds_cal = calibrate(ds, file)
    ds_cal.to_netcdf(export_path+os.path.basename(file))

